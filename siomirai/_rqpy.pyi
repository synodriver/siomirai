from typing import Any, ClassVar

class AccountInfo:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Device:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def ksid(self) -> bytes: ...
    @staticmethod
    def random() -> Device: ...

class Engine:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...
    def build_device_lock_login_packet(self) -> Packet: ...
    def build_qrcode_fetch_request_packet(self) -> Packet: ...
    def build_qrcode_login_packet(self, t106: bytes, t16a: bytes, t318: bytes) -> Packet: ...
    def build_qrcode_result_query_request_packet(self, sig: bytes) -> Packet: ...
    def decode_login_response(self, payload: bytes) -> LoginResponse: ...
    def decode_packet(self, payload: bytes) -> Packet: ...
    def decode_trans_emp_response(self, payload: bytes) -> QRCodeState: ...
    def encode_packet(self, pkt: Packet) -> bytes: ...

class LoginResponse:
    account_frozen: ClassVar[getset_descriptor] = ...
    device_lock_login: ClassVar[getset_descriptor] = ...
    success: ClassVar[getset_descriptor] = ...
    too_many_sms_request: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class LoginSuccess:
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class Packet:
    body: ClassVar[getset_descriptor] = ...
    command_name: ClassVar[getset_descriptor] = ...
    encrypt_type: ClassVar[getset_descriptor] = ...
    message: ClassVar[getset_descriptor] = ...
    packet_type: ClassVar[getset_descriptor] = ...
    seq_id: ClassVar[getset_descriptor] = ...
    uin: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class QRCodeConfirmed:
    tgt_qr: ClassVar[getset_descriptor] = ...
    tmp_no_pic_sig: ClassVar[getset_descriptor] = ...
    tmp_pwd: ClassVar[getset_descriptor] = ...
    uin: ClassVar[getset_descriptor] = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class QRCodeImageFetch:
    image: bytes = ...
    sig: bytes = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

class QRCodeState:
    image_fetch: QRCodeImageFetch = ...
    @classmethod
    def __init__(self, *args, **kwargs) -> None: ...

def sum_as_string(a: int, b: int) -> str: ...
